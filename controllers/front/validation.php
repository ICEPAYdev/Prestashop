<?php/** * @package       ICEPAY Payment Module for Prestashop * @author        Ricardo Jacobs <ricardo.jacobs@icepay.com> * @copyright     (c) 2015 ICEPAY. All rights reserved. * @version       2.2.0, September 2015 * @license       BSD 2 License, see https://github.com/icepay/Prestashop/blob/master/LICENSE.md */class IcepayValidationModuleFrontController extends ModuleFrontController{    public function postProcess()    {        $cart = $this->context->cart;        if ($cart->id_customer == 0 || $cart->id_address_delivery == 0 || $cart->id_address_invoice == 0 || !$this->module->active)            Tools::redirect('index.php?controller=order&step=1');        $address = new Address((int)$cart->id_address_invoice);        $lang = Language::getLanguage($cart->id_lang);        $currency = Currency::getCurrency($cart->id_currency);        $customer = new Customer((int)$this->context->cart->id_customer);        $this->module->validateOrder((int)$this->context->cart->id, Configuration::get('PS_OS_ICEPAY_OPEN'), 0, $this->module->displayName, null, array(), null, true, $customer->secure_key);        $order = new Order($this->module->currentOrder);        $paymentObj = new Icepay_PaymentObject();        $paymentObj->setAmount($cart->getOrderTotal(true, Cart::BOTH) * 100)            ->setCountry($this->context->country->iso_code)            ->setLanguage(strtoupper($lang["iso_code"]))            ->setIssuer(Tools::getValue('pmIssuer'))            ->setPaymentMethod(Tools::getValue('pmCode'))            ->setDescription($this->module->cDescription)            ->setCurrency($currency['iso_code']);        if (Configuration::get('ICEPAY_TESTPREFIX') == 'ON') {            $paymentObj->setOrderID("test_" . $order->id)->setReference("test_" . $order->reference);        } else {            $paymentObj->setOrderID($order->id)->setReference($order->reference);        }        $webservice = new Icepay_Webservice_Pay();        $webservice            ->setMerchantID(Configuration::get('ICEPAY_MERCHANTID'))            ->setSecretCode(Configuration::get('ICEPAY_SECRETCODE'))            ->setSuccessURL(Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . '?fc=module&module=icepay&controller=validate&key=' . $customer->secure_key)            ->setErrorURL(Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . '?fc=module&module=icepay&controller=validate&key=' . $customer->secure_key);        $webservice->setupClient();        $webservice->addToExtendedCheckoutList(array('AFTERPAY'));        $error = false;        if ($webservice->isExtendedCheckoutRequiredByPaymentMethod(Tools::getValue('pmCode'))) {            try {                $phoneNumber = $this->getPhoneNumber($address);                Icepay_Order::getInstance()                    ->setConsumer(Icepay_Order_Consumer::create()                        ->setConsumerID($this->context->customer->id)                        ->setEmail($this->context->customer->email)                        ->setPhone($phoneNumber)                    );                foreach ($cart->getProducts() as $product) {                    Icepay_Order::getInstance()                        ->addProduct(Icepay_Order_Product::create()                            ->setProductID($product["id_product"])                            ->setProductName($product["name"])                            ->setDescription($product["name"])                            ->setQuantity($product["quantity"])                            ->setUnitPrice((int)(string)($product["price_wt"] * 100))                            ->setVATCategory(Icepay_Order_VAT::getCategoryForPercentage($product["rate"]))                        );                };                $address = new Address((int)$cart->id_address_delivery);                $country = new Country((int)$address->id_country);                $street = $address->address1 . " " . $address->address2;                Icepay_Order::getInstance()                    ->setShippingAddress(                        Icepay_Order_Address::create()                            ->setInitials($address->firstname)                            ->setLastName($address->lastname)                            ->setStreet(Icepay_Order_Helper::getStreetFromAddress($street))                            ->setHouseNumber(Icepay_Order_Helper::getHouseNumberFromAddress($street))                            ->setHouseNumberAddition(Icepay_Order_Helper::getHouseNumberAdditionFromAddress($street))                            ->setZipCode($address->postcode)                            ->setCity($address->city)                            ->setCountry($country->iso_code)                    );                $address = new Address((int)$cart->id_address_invoice);                $country = new Country((int)$address->id_country);                $street = $address->address1 . " " . $address->address2;                Icepay_Order::getInstance()                    ->setBillingAddress(                        Icepay_Order_Address::create()                            ->setInitials($address->firstname)                            ->setLastName($address->lastname)                            ->setStreet(Icepay_Order_Helper::getStreetFromAddress($street))                            ->setHouseNumber(Icepay_Order_Helper::getHouseNumberFromAddress($street))                            ->setHouseNumberAddition(Icepay_Order_Helper::getHouseNumberAdditionFromAddress($street))                            ->setZipCode($address->postcode)                            ->setCity($address->city)                            ->setCountry($country->iso_code)                    );                $discount = $cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS) * 100;                if ($discount != '') {                    Icepay_Order::getInstance()->setOrderDiscountAmount($discount);                }                $cartSummary = $cart->getSummaryDetails();                $taxAmount = ($cartSummary['total_wrapping'] - $cartSummary['total_wrapping_tax_exc']) * 100;                $giftWrapPrice = ($cartSummary['total_wrapping'] * 100);                $taxPercentage = (int)(string)($taxAmount / ($giftWrapPrice - $taxAmount) * 100);                Icepay_Order::getInstance()                    ->addProduct(Icepay_Order_Product::create()                        ->setProductID('00')                        ->setProductName('Gift Wrapping')                        ->setDescription('Gift Wrapping')                        ->setQuantity('1')                        ->setUnitPrice($giftWrapPrice)                        ->setVATCategory(Icepay_Order_VAT::getCategoryForPercentage($taxPercentage))                    );                Icepay_Order::getInstance()->setShippingCosts($order->total_shipping_tax_incl * 100, $order->carrier_tax_rate);            } catch (Exception $e) {                $error = true;                if (isset($order)) {                    $order->setCurrentState(Configuration::get('PS_OS_ERROR'));                }                $this->context->smarty->assign(array(                    'total' => $this->context->cart->getOrderTotal(true, Cart::BOTH),                    'this_path' => $this->module->getPathUri(),                    'this_path_ssl' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'modules/' . $this->module->name . '/',                    'error' => $e->getMessage(),                    'return' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'index.php?controller=order&step=3&id_order=' . $order->id . '&submitReorder=Reorder',                ));                $this->setTemplate('validation.tpl');            }        }        if (!$error) {            try {                $transactionObj = ($webservice->isExtendedCheckoutRequiredByPaymentMethod(Tools::getValue('pmCode'))) ? $webservice->extendedCheckout($paymentObj) : $webservice->checkOut($paymentObj);                Tools::redirectLink($transactionObj->getPaymentScreenURL());            } catch (Exception $e) {                if (isset($order)) {                    $order->setCurrentState(Configuration::get('PS_OS_ERROR'));                }                $this->context->smarty->assign(array(                    'total' => $this->context->cart->getOrderTotal(true, Cart::BOTH),                    'this_path' => $this->module->getPathUri(),                    'this_path_ssl' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'modules/' . $this->module->name . '/',                    'error' => $e->getMessage(),                    'return' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'index.php?controller=order&step=3&id_order=' . $order->id . '&submitReorder=Reorder',                ));                $this->setTemplate('validation.tpl');            }        }    }    private function getPhoneNumber($address)    {        $phone = empty($address->phone) ? $address->phone_mobile : $address->phone;        $phone = preg_replace(array('/\s/', '/[()]/'), '', $phone);        return $phone;    }}