<?php/** * @package       ICEPAY Payment Module for Prestashop * @copyright     (c) 2016 ICEPAY. All rights reserved. * @version       2.2.0, August 2016 * @license       BSD 2 License, see https://github.com/ICEPAYdev/Prestashop/blob/master/LICENSE.md */class IcepayPaymentModuleFrontController extends ModuleFrontController{    public $ssl = true;    private function checkCurrency()    {        // Get cart currency and enabled currencies for this module        $currency_order = new Currency($this->context->cart->id_currency);        $currencies_module = $this->module->getCurrency($this->context->cart->id_currency);        // Check if cart currency is one of the enabled currencies        if (is_array($currencies_module))            foreach ($currencies_module as $currency_module)                if ($currency_order->id == $currency_module['id_currency'])                    return true;        // Return false otherwise        return false;    }    public function initContent()    {        $this->display_column_left = false;        $this->display_column_right = false;        parent::initContent();        // Check if currency is accepted        if (!$this->checkCurrency())            Tools::redirect('index.php?controller=order'); //TODO:        $paymentMethodCode = pSQL(Tools::getValue('method'));        $activeShopID = (int)Context::getContext()->shop->id;        $storedPaymentMethod = Db::getInstance()->executeS("SELECT raw_pm_data FROM `{$this->module->dbRawData}` WHERE `id_shop` = {$activeShopID}"); //TODO:table name        $mt = new Icepay_Webservice_Paymentmethod();        $method = $mt->loadFromArray(unserialize($storedPaymentMethod[0]['raw_pm_data']));        $pMethod = $method->selectPaymentMethodByCode($paymentMethodCode);        $paymentMethod = Db::getInstance()->executeS("SELECT active, displayname, pm_code FROM `{$this->module->dbPmInfo}` WHERE pm_code = '{$paymentMethodCode}' AND `id_shop` = {$activeShopID}");        $issuerList = $pMethod->getIssuers();        // Assign data to Smarty        $this->context->smarty->assign(array(            'nb_products' => $this->context->cart->nbProducts(),            'cart_currency' => $this->context->cart->id_currency,            'total_amount' =>$this->context->cart->getOrderTotal(true, Cart::BOTH),            'path' => $this->module->getPathUri(),            'issuerList' => $issuerList,            'paymentMethod' => $paymentMethodCode,            'displayname' => $paymentMethod[0]['displayname']        ));        $this->setTemplate('paymentExecution.tpl');    }}