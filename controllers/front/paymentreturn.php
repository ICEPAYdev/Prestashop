<?php/** * @package       ICEPAY Payment Module for Prestashop * @copyright     (c) 2016 ICEPAY. All rights reserved. * @version       2.2.0, August 2016 * @license       BSD 2 License, see https://github.com/ICEPAYdev/Prestashop/blob/master/LICENSE.md */class IcepayPaymentReturnModuleFrontController extends ModuleFrontController{    public function __construct()    {        parent::__construct();        $this->byIcepayStatus = array(            Icepay_StatusCode::OPEN => Configuration::get('PS_OS_ICEPAY_OPEN'),            Icepay_StatusCode::AUTHORIZED => Configuration::get('PS_OS_ICEPAY_AUTH'),            Icepay_StatusCode::SUCCESS => Configuration::get('PS_OS_PAYMENT'),            Icepay_StatusCode::ERROR => Configuration::get('PS_OS_ERROR')        );        $this->byPrestaStatus = array(            Configuration::get('PS_OS_ICEPAY_OPEN') => Icepay_StatusCode::OPEN,            Configuration::get('PS_OS_ICEPAY_AUTH') => Icepay_StatusCode::AUTHORIZED,            Configuration::get('PS_OS_PAYMENT') => Icepay_StatusCode::SUCCESS,            Configuration::get('PS_OS_ERROR') => Icepay_StatusCode::ERROR        );    }    public function initContent()    {        $this->display_column_left = false;        $this->display_column_right = false;        parent::initContent();        $this->setTemplate('validation.tpl');    }    public function postProcess()    {        // Check if module is enabled        $authorized = false;        foreach (Module::getPaymentModules() as $module)            if ($module['name'] == $this->module->name)                $authorized = true;        if (!$authorized)            die('This payment method is not available.');        $icepay = new Icepay_Result();        try {            $icepay->setMerchantID(Configuration::get('ICEPAY_MERCHANTID'))->setSecretCode(Configuration::get('ICEPAY_SECRETCODE'));        } catch (Exception $e) {            $this->context->smarty->assign(array(                'error' =>  $this->module->l("There was a problem creating your order")            ));            return '';        }        if ($icepay->validate())        {            $order = new Order($icepay->getOrderID());            $cart = new Cart($order->getCartIdStatic($order->id));            $customer = $order->getCustomer();            $modID = Module::getInstanceByName($order->module);            switch ($icepay->getStatus()) {                case Icepay_StatusCode::OPEN:                case Icepay_StatusCode::AUTHORIZED:                case Icepay_StatusCode::VALIDATE:                case Icepay_StatusCode::SUCCESS:                    Tools::redirect(Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'index.php?controller=order-confirmation&id_cart=' . (int)$cart->id . '&id_module=' . (int)$modID->id . '&id_order=' . $order->id . '&key=' . $customer->secure_key . '&status=' . $icepay->getStatus());                    break;                case Icepay_StatusCode::ERROR:                    $this->context->smarty->assign(array(                        'total' => $this->context->cart->getOrderTotal(true, Cart::BOTH),                        'error' => $icepay->getStatus(true),                        'return' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'index.php?controller=order&step=3&id_order=' . $order->id . '&submitReorder=Reorder',                    ));                    break;            }            return;        };        $this->context->smarty->assign(array(            'error' =>  $this->l("There was a problem creating your order")        ));    }}